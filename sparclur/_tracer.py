import abc

from sparclur._parser import Parser


class Tracer(Parser, metaclass=abc.ABCMeta):
    """
        Abstract class for wrapping the process of getting error messages from a parser.

        This abstract class standardizes what's expected from a parser in order to be used with the Parser Trace
        Comparator module (PTC).
    """
    @abc.abstractmethod
    def _parse_document(self):
        """
        Parses the document to retrieve the error and warning messages generated by the parser, if any.
        """
        pass

    @abc.abstractmethod
    def get_messages(self):
        """
        Return the error and warnings for the document passed into the Parser instance.

        Returns
        -------
        List[str]
            The list of all raw messages from the parser over the given document
        """
        pass

    @abc.abstractmethod
    def get_cleaned(self):
        """
        Return a normalized collection of the warnings and errors with occurrence counts.

        Returns
        -------
        Dict[str, int]
            A dictionary with each normalized message as the key and the occurrence count as the value
        """
        pass

    @abc.abstractmethod
    def _clean_message(self, err):
        """
        Normalizes a given message generated by the parser.

        Parameters
        ----------
        err : str
            An observed message from the parser to be normalized
        Returns
        -------
        str
            The normalized message
        """
        pass

    @abc.abstractmethod
    def _scrub_messages(self):
        """
        Normalizes all of the observed messages for the provided document.
        """
        pass
